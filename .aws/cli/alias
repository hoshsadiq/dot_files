[toplevel]

saml =
  !f() {
    if [ "$#" -ge 2 ] && [ "$1" = "login" ] && grep -qFx "[$2]" ~/.saml2aws; then
	account="$2"
        shift
	shift
	saml2aws login --skip-prompt --idp-account="$account" --mfa=TOTP --mfa-token="$(rbw code launchdarkly.okta.com)" "$@"
    else
        saml2aws "$@"
    fi
  }; f

attach-vpn-ssh =
  !f() {
    instance="$1"
    if [[ $instance =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
  }; f

whoami = sts get-caller-identity

# Example
# eval "$(aws switch-role --role-arn arn:aws:iam::<some-account>:role/<some-role> --role-session-name <session-name>)"
#
switch-role = sts assume-role \
      --output text \
      --query 'Credentials.[
          join(`=`, [`export AWS_ACCESS_KEY_ID`, AccessKeyId]),
          join(`=`, [`export AWS_SECRET_ACCESS_KEY`, SecretAccessKey]),
          join(`=`, [`export AWS_SESSION_TOKEN`, SessionToken])
        ] | join(`\n`, @)'

ec2-instances-list = ec2 describe-instances \
    --output table \
    --query 'Reservations[*].Instances[*].{
        Name: Tags[?Key == `Name`].Value | [0],
        ID: InstanceId,
        State: State.Name,
        Type: InstanceType,
        Platform: Platform || `Linux`,
        PublicIp: PublicIpAddress,
        PrivateIp: PrivateIpAddress
    }'

running-instances = list-instances --filter Name=instance-state-name,Values=running

ec2-password-get = ec2 get-password-data --query PasswordData --output text

ebs-volumes = ec2 describe-volumes \
    --query 'Volumes[].{VolumeId: VolumeId,State: State,Size: Size,Name: Tags[0].Value,AZ: AvailabilityZone}' \
    --output table

amazon-linux-amis = ec2 describe-images \
    --filter \
      Name=owner-alias,Values=amazon \
      Name=name,Values="amzn-ami-hvm-*" \
      Name=architecture,Values=x86_64 \
      Name=virtualization-type,Values=hvm \
      Name=root-device-type,Values=ebs \
      Name=block-device-mapping.volume-type,Values=gp2 \
    --query "reverse(sort_by(Images, &CreationDate))[*].[ImageId,Name,Description]" \
    --output text

list-sgs = ec2 describe-security-groups --query "SecurityGroups[].[GroupId, GroupName]" --output text

sg-rules = ec2 describe-security-groups \
    --query "sort_by(SecurityGroups[].IpPermissions[].{
                a_FromPort: FromPort,
                b_ToPort:ToPort,
                c_IpProtocol:IpProtocol,
                d_CidrIpRanges:join(',', sort_by(IpRanges, &CidrIp)[].CidrIp),
                e_GroupIds: join(',', UserIdGroupPairs[].GroupId)
              }, &to_string(a_FromPort))"

list-open-ssh = ec2 describe-security-groups \
    --filters "Name=ip-permission.to-port,Values=22"  \
    --query 'SecurityGroups[?length(IpPermissions[?ToPort==`22` && contains(IpRanges[].CidrIp, `0.0.0.0/0`)]) > `0`].{GroupId: GroupId, GroupName: GroupName}' \
    --output table

# list all security group port ranges open to 0.0.0.0/0
list-open-ports = ec2 describe-security-groups \
  --filters Name=ip-permission.cidr,Values=0.0.0.0/0 \
  --query 'SecurityGroups[].{
    VpcId:VpcId,
    GroupName:GroupName,
    GroupId:GroupId,
    PortRanges:
      IpPermissions[?contains(IpRanges[].CidrIp, `0.0.0.0/0`)].[
        join(`:`, [IpProtocol, join(`-`, [to_string(FromPort), to_string(ToPort)])])
      ][]
  }'

# List or set your region
region = !f() { [[ $# -eq 1 ]] && aws configure set region "$1" || aws configure get region; }; f

list-regions = ec2 describe-regions --query 'Regions[].RegionName' --output text --region us-east-1

#run-regions =
#    !f() {
#      set -x
#      profile=()
#      args=()
#      while [[ $# -gt 0 ]]; do
#          case "$1" in
#              --profile=*) profile="$1"; ;;
#              --profile) profile="$1 $2"; shift; ;;
#              *) args+=("$OPT"); ;;
#          esac
#          shift
#      done
#
#      echo "${profile}"
#      regions=($(aws list-regions "${profile[@]}")) # todo select profile
#      for region in "${regions[@]}"; do
#          echo aws "$args[@]" --region "$region"
#      done
#    }; f

find-access-key = !f() {
    clear_to_eol=$(tput el)
    for i in $(aws iam list-users --query "Users[].UserName" --output text); do
      printf "\r%sSearching...$i" "${clear_to_eol}"
      result=$(aws iam list-access-keys --output text --user-name "${i}" --query "AccessKeyMetadata[?AccessKeyId=='${1}'].UserName";)
      if [ -n "${result}" ]; then
         printf "\r%s%s is owned by %s.\n" "${lear_to_eol}" "$1" "${result}"
         break
      fi
    done
    if [ -z "${result}" ]; then
      printf "\r%sKey not found." "${clear_to_eol}"
    fi
  }; f

docker-ecr-login =
  !f() {
    region=$(aws configure get region)
    [ -z $region ] && region="us-east-1"
    endpoint=$(aws ecr get-authorization-token --region $region --output text --query authorizationData[].proxyEndpoint)
    passwd=$(aws ecr get-authorization-token --region $region --output text --query authorizationData[].authorizationToken | base64 --decode | cut -d: -f2)
    docker login -u AWS -p $passwd $endpoint
  }; f

myip =
  !f() {
    dig +short myip.opendns.com @resolver1.opendns.com
  }; f

allow-my-ip =
  !f() {
    my_ip=$(aws myip)
    aws ec2 authorize-security-group-ingress --group-name ${1} --protocol ${2} --port ${3} --cidr $my_ip/32
  }; f

revoke-my-ip =
  !f() {
    my_ip=$(aws myip)
    aws ec2 revoke-security-group-ingress --group-name ${1} --protocol ${2} --port ${3} --cidr $my_ip/32
  }; f

allow-my-ip-all =
  !f() {
    aws allow-my-ip ${1} all all
  }; f

revoke-my-ip-all =
  !f() {
    aws revoke-my-ip ${1} all all
  }; f
