# vim: syntax=gitconfig
# vim: tabstop=4

[user]
	name = Hosh Sadiq
#	signingKey = 3418AF82F76A502A507C5370AF4AB10ED697B4C9

[core]
	pager = "delta --theme='Monokai Extended Origin'"
	editor = vim
#	autocrlf = false
	excludesfile = ~/dot_files/config/git/gitignore
	attributesfile = ~/dot_files/config/git/gitattributes
	preloadindex = true
	fscache = true
	untrackedCache = true
	#hooksPath = ~/dot_files/config/git/hooks

;[url "git@github.com:"]
;	insteadOf = https://github.com/
;	insteadOf = git@github.com/
;[url "git://"]
;	insteadOf = https://

[fetch]
	prune = true

[color]
	diff = auto
	ui = auto
	status = auto
	branch = auto
	interactive = auto
	pager = true

[delta]
	line-numbers = true

[push]
	default = simple

[branch]
	autosetupmerge = true

[alias]
	unstage = reset HEAD --
	root = rev-parse --show-toplevel
	dl = ll -1
	dlc = diff --cached HEAD^
	prune = fetch --prune
	undo = reset --soft HEAD^

    pwd = "!realpath --relative-to=$(git rev-parse --show-toplevel) $(cd -- ${GIT_PREFIX:-.}; pwd)"

	branch-name = rev-parse --abbrev-ref HEAD
	show-unpushed = log --branches --not --remotes

	stash-all = stash save --include-untracked
	stash-staged = "!bash -c 'git stash --keep-index; git stash push -m staged --keep-index; git stash pop stash@{1}'"

	co = checkout
	ci = commit
	st = status
	br = branch

	type = cat-file -t
	dump = cat-file -p

	filelog = log -u
	graph = log --graph --all --pretty=format:'%Cred%h%Creset - %Cgreen(%cr)%Creset %s%C(yellow)%d%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	ls = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

	branchm = "!git branch -m $2 $3 && git push $1 :$2 $3 -u #"
	mkbr = "!f() { \
                set -eu; \
                git fetch origin; \
                git checkout -b \"$1\" \"origin/$(git main-branch)\"; \
            }; f"

    main-branch = "!f() { \
                        set -eu; \
                        for branch in main trunk; do \
                            if command git show-ref -q --verify refs/heads/$branch; then \
                                echo $branch; \
                                return; \
                            fi; \
                        done; \
                        echo master; \
                    }; f"

	patch = --no-pager diff --no-color
    permission-reset = "!f() { \
                            git diff -p -R --no-color | \
                            grep -E '^(diff|(old|new) mode)' --color=never | \
                            git apply; \
                        }; f"

	diff-intellij = difftool --tool=intellij
	intellidiff = difftool --tool=intellij
	# remote-to-https = ! f() { echo "$1" }
	remote-to-https = "! f() {\
			newUrl=\"$(git remote get-url $1 | sed \"s#^git@\\(.*\\):/*\\(.*\\).git#https://\\1/\\2.git#\")\"; \
			echo \"Setting remote to $newUrl\"; \
			git remote set-url $1 $newUrl; \
		}; f"
	remote-to-ssh = "! f() { \
			newUrl=\"$(git remote get-url $1 | sed \"s#^https://\\([^/]*\\)/\\(.*\\).git#git@\\1:\\2.git#\")\"; \
			echo \"Setting remote to $newUrl\"; \
			git remote set-url $1 $newUrl; \
		}; f"

	# git remote set-url "$1" "$(git remote get-url "$1" | sed "s#^git@\(.*\):/*\(.*\).git#https://\1/\2.git#")"

	# remote-https = !git remote set-url origin $(git remote get-url origin | sed \'s/^git@\(.*\):\/*\(.*\).git/https:\/\/\1\/\2.git/\')
	# remote-ssh = !git remote set-url origin $(git remote get-url origin | sed 's/^git@\(.*\):\/*\(.*\).git/https:\/\/\1\/\2.git/')

[diff]
	tool = vimdiff
	compactionHeuristic = true
	indentHeuristic = true
	mnemonicPrefix = true
	renames = copies

[diff "json"]
	textconv = gojq .
[diff "xml"]
	textconv = xmllint --format
[diff "pdf"]
	binary = true
	textconv = sh -c 'pdftotext -enc "UTF-8" -layout "$@" -'
[diff "sqlite3"]
	binary = true
	textconv = "echo .dump | sqlite3"
# [diff "doc"]
# 	binary = true
# 	textconv = catdoc
# [diff "odf"]
# 	binary = true
# 	textconv = odt2txt

[difftool]
	prompt = false

[difftool "intellij"]
	cmd = idea diff $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE")

[merge]
	tool = intellij
[mergetool "intellij"]
	cmd = idea merge "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
	trustExitCode = true

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[apply]
	whitespace = fix

[commit]
	#gpgSign = true
	verbose = true
	template = ~/dot_files/config/git/gitmessage

[pull]
	rebase = true
	ff = only

[rebase]
	autoStash = true

[sendpack]
	sideband = false

[gc]
	auto = 256

[status]
	submoduleSummary = false
[format]
	graph = true
[grep]
	lineNumber = true
[help]
	autoCorrect = 1
[log]
	abbrevCommit = true
	decorate = short
