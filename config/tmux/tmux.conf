set -g @plugin 'tmux-plugins/tpm'

set -g @extrakto_fzf_tool '/home/hosh/.zinit/plugins/junegunn---fzf/fzf'

set -g @plugin 'laktak/extrakto'
# set -g @plugin 'christoomey/vim-tmux-navigator' # todo there are some config options I should enable.

set-option -g @ssh-split-keep-cwd "true"
set-option -g @ssh-split-fail "false"
set-option -g @ssh-split-no-shell "true"
set-option -g @ssh-split-strip-cmd "true"
set-option -g @ssh-split-verbose "false"
set-option -g @ssh-split-h-key "|"
set-option -g @ssh-split-v-key "-"
set -g @plugin 'pschmitt/tmux-ssh-split'

# todo $HOME/dot_files needs to be dynamic
# source-file "$HOME/dot_files/third-party/tmux-gitbar/tmux-gitbar.tmux"

# -- general -------------------------------------------------------------------

set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",tmux-256color:Tc"
set-environment -g COLORTERM "truecolor"

set-option -g default-shell ${SHELL}
set -gw xterm-keys on
set -s escape-time 1    # faster command sequences
set -sg repeat-time 600 # increase repeat timeout
set -s focus-events on

set -g history-limit 100000 # boost history

setw -qg utf8 on

# reload configuration
bind r source-file ~/.config/tmux/tmux.conf \; display '~/.config/tmux/tmux.conf reloaded'

# notifications
setw -g monitor-activity on # Activity Alerts
set -g visual-activity on

# -- display -------------------------------------------------------------------

set -g base-index 1       # start windows numbering at 1
setw -g pane-base-index 1 # make pane numbering consistent with windows

setw -g automatic-rename on # rename window to reflect current program
set -g renumber-windows on  # renumber windows when a window is closed

set -g set-titles on # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g @git-status-prefix "#{?pane_active,#[fg=colour247],}┤ "
# setw @git-status-suffix " #{?pane_active,#[fg=colour247],}├ "
set -g @curdir-prefix "#{?pane_active,#[fg=colour247],}┤ "
# setw @curdir-suffix "#{?pane_active,#[fg=colour247],}├ "

# -- theme ---------------------------------------------------------------------

# text=""; for i in {0..255}; do text="$text$(printf "\x1b[38;5;${i}mcolor%-5i\x1b[0m" "$i")"; if ! (( ($i + 1 ) % 8 )); then text="$text$(print "\n")"; fi; done

# Window list color
set -g pane-border-status bottom
set -g pane-border-style "fg=colour239,bg=default"
set -g pane-active-border-style "fg=colour255,bg=colour235"
set -g pane-border-format '#{?pane_active,#[fg=colour252]─,}#{tmux-curdir "#P"}#[fg=default]' # this doesn't work yet: #{tmux-git-status "#P"}

# status bar
set -g status on
set -g status-position top
set -g status-justify left
set -g status-interval 1
set -g status-style "none,bg=colour235"

set -g status-left-length 100
set -g status-left "#{?client_prefix,#[fg=colour194]#[bg=red],#[fg=colour232]#[bg=white]} #{tmux-os-icon} #[bold] #{session_name} "

# ♪ #(exec amixer get Master | egrep -o '[0-9]+%' | egrep -o '[0-9]*')
set -g status-right-length 100
set -g status-right " #[fg=colour243,bg=colour235,bold]  #{USER}@#{host_short} #[fg=colour255,bg=colour232,bold] #{session_attached} #{tmux-online-status}#[fg=black,bg=white] %a %d %b | %H:%M "

# window status
setw -g window-status-activity-style "fg=colour243,bg=colour235"
setw -g window-status-format " #{?window_activity_flag, ,}#I[#W]#{?window_zoomed_flag,缾, }#{?pane_synchronized,罹,}#{?#{||,#{window_zoomed_flag},#{pane_synchronized}}, ,}"
setw -g window-status-current-format "#[fg=colour243,bg=colour233] #I[#W]#{?window_zoomed_flag,缾, }#{?pane_synchronized,罹,}#{?#{||,#{window_zoomed_flag},#{pane_synchronized}}, ,}"
# setw -g window-status-current-format "#[fg=colour243,bg=colour233] #I[#{tmux-status-current #pane_tty}]#{?window_zoomed_flag,缾, }#{?pane_synchronized,罹,}#{?#{||,#{window_zoomed_flag},#{pane_synchronized}}, ,}"

# ----

# unbind items
unbind -n C-l
unbind %
unbind '"'
unbind C-z

# Hide status-bar when only one window, however, we have a client_prefix indicator.
# set-hook window-linked "if-shell -F '#{!=:#{session_windows},1}' 'set status on'"
# set-hook window-unlinked "if-shell -F '#{==:#{session_windows},1}' 'set status off'"

# vi keys to move
setw -g mode-keys vi
set -g status-keys vi

# -- Pane and layout

# Numbering of windows/panes
set -g base-index 1
setw -g pane-base-index 1 # Numbering of Panes

# set navigation optoins
bind M-| split-window -h -c "#{pane_current_path}"
bind M-- split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# pane navigation
unbind '{'
unbind '}'
bind -r '{' swap-pane -D # swap current pane with the next one
bind -r '}' swap-pane -U # swap current pane with the previous one

bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Window navigation
bind C-b last-window
bind C-p previous-window
bind C-n next-window

bind C-c command-prompt -p "Session Name:" "new -s %%"

# bind -n C-s run-shell 'pet search --color'

# pane resizing
bind -n C-M-h resize-pane -L 2
bind -n C-M-j resize-pane -D 2
bind -n C-M-k resize-pane -U 2
bind -n C-M-l resize-pane -R 2

# Zoom the current pane
unbind z
bind z resize-pane -Z

unbind x
bind C-x kill-pane

# Use '"' to list windows, like in Screen.
# Leave tmux's 'w' binding though.
# Also, support tmux 2.5, which has different `choose-tree` defaults.
if-shell 'tmux -V | grep "tmux 2.5"' 'bind "\"" choose-tree -u' 'bind "\"" choose-tree -s'
if-shell 'tmux -V | grep "tmux 2.5"' 'bind w choose-tree -u' 'bind w choose-tree -w'

# bind M command-prompt -p "Manpage:" "neww 'source ~/.zplugin/snippets/OMZ::plugins--colored-man-pages/colored-man-pages.plugin.zsh/colored-man-pages.plugin.zsh; MANWIDTH=80 TERM=screen-256color man %%'"
# bind m command-prompt -p "Manpage:" "split-window -h 'source ~/.zplugin/snippets/OMZ::plugins--colored-man-pages/colored-man-pages.plugin.zsh/colored-man-pages.plugin.zsh; MANWIDTH=80 TERM=screen-256color man %%'"
bind M command-prompt -p "Manpage:" "neww 'MANWIDTH=80 TERM=screen-256color zsh -lc \'man %%\''"
bind m command-prompt -p "Manpage:" "split-window -h 'MANWIDTH=80 TERM=screen-256color zsh -lc \'man %%\''"

# mouse mode
set -g mouse on
# set -g mouse-select-pane on
set -g set-clipboard external
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -sel clip > /dev/null"
bind p run "xclip -o -sel clip | tmux load-buffer - ; tmux paste-buffer"
bind C-m set-option -g mouse \; display 'Mouse is now #{?mouse,on,off}'

# bind Enter copy-mode # enter copy mode
#
# bind -T copy-mode-vi v send -X begin-selection
# bind -T copy-mode-vi C-v send -X rectangle-toggle
# bind -T copy-mode-vi y send -X copy-selection-and-cancel
# bind -T copy-mode-vi Escape send -X cancel
# bind -T copy-mode-vi H send -X start-of-line
# bind -T copy-mode-vi L send -X end-of-line
#
# # copy to macOS clipboard
# if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
# if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# # copy to X11 clipboard
# if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
# if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# # copy to Windows clipboard
# if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
# if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

bind P pipe-pane -o "mkdir -p ~/tmp/; cat >>~/tmp/tmux-#W.log" \; display "Toggled logging to ~/tmp/tmux-#W.log"

#run-shell ~/dot_files/tmux/plugins.tmux
run '~/.zinit/plugins/tmux-plugins---tpm/tpm'
